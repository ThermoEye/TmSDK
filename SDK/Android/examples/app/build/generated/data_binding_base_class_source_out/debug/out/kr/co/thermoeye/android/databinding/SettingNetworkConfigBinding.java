// Generated by view binder compiler. Do not edit!
package kr.co.thermoeye.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kr.co.thermoeye.android.R;

public final class SettingNetworkConfigBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonNetworkSet;

  @NonNull
  public final EditText editTextNetworkDns1Val;

  @NonNull
  public final EditText editTextNetworkDns2Val;

  @NonNull
  public final EditText editTextNetworkGatewayVal;

  @NonNull
  public final EditText editTextNetworkIpVal;

  @NonNull
  public final EditText editTextNetworkMacVal;

  @NonNull
  public final EditText editTextNetworkNetmaskVal;

  @NonNull
  public final LinearLayout settingNetworkConfig;

  @NonNull
  public final Spinner spinnerNetworkIpAssignment;

  @NonNull
  public final TextView textViewNetworkDns1;

  @NonNull
  public final TextView textViewNetworkDns2;

  @NonNull
  public final TextView textViewNetworkGateway;

  @NonNull
  public final TextView textViewNetworkIp;

  @NonNull
  public final TextView textViewNetworkIpAssignment;

  @NonNull
  public final TextView textViewNetworkMac;

  @NonNull
  public final TextView textViewNetworkNetmask;

  private SettingNetworkConfigBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button buttonNetworkSet, @NonNull EditText editTextNetworkDns1Val,
      @NonNull EditText editTextNetworkDns2Val, @NonNull EditText editTextNetworkGatewayVal,
      @NonNull EditText editTextNetworkIpVal, @NonNull EditText editTextNetworkMacVal,
      @NonNull EditText editTextNetworkNetmaskVal, @NonNull LinearLayout settingNetworkConfig,
      @NonNull Spinner spinnerNetworkIpAssignment, @NonNull TextView textViewNetworkDns1,
      @NonNull TextView textViewNetworkDns2, @NonNull TextView textViewNetworkGateway,
      @NonNull TextView textViewNetworkIp, @NonNull TextView textViewNetworkIpAssignment,
      @NonNull TextView textViewNetworkMac, @NonNull TextView textViewNetworkNetmask) {
    this.rootView = rootView;
    this.buttonNetworkSet = buttonNetworkSet;
    this.editTextNetworkDns1Val = editTextNetworkDns1Val;
    this.editTextNetworkDns2Val = editTextNetworkDns2Val;
    this.editTextNetworkGatewayVal = editTextNetworkGatewayVal;
    this.editTextNetworkIpVal = editTextNetworkIpVal;
    this.editTextNetworkMacVal = editTextNetworkMacVal;
    this.editTextNetworkNetmaskVal = editTextNetworkNetmaskVal;
    this.settingNetworkConfig = settingNetworkConfig;
    this.spinnerNetworkIpAssignment = spinnerNetworkIpAssignment;
    this.textViewNetworkDns1 = textViewNetworkDns1;
    this.textViewNetworkDns2 = textViewNetworkDns2;
    this.textViewNetworkGateway = textViewNetworkGateway;
    this.textViewNetworkIp = textViewNetworkIp;
    this.textViewNetworkIpAssignment = textViewNetworkIpAssignment;
    this.textViewNetworkMac = textViewNetworkMac;
    this.textViewNetworkNetmask = textViewNetworkNetmask;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SettingNetworkConfigBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SettingNetworkConfigBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.setting_network_config, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SettingNetworkConfigBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_networkSet;
      Button buttonNetworkSet = ViewBindings.findChildViewById(rootView, id);
      if (buttonNetworkSet == null) {
        break missingId;
      }

      id = R.id.editText_networkDns1Val;
      EditText editTextNetworkDns1Val = ViewBindings.findChildViewById(rootView, id);
      if (editTextNetworkDns1Val == null) {
        break missingId;
      }

      id = R.id.editText_networkDns2Val;
      EditText editTextNetworkDns2Val = ViewBindings.findChildViewById(rootView, id);
      if (editTextNetworkDns2Val == null) {
        break missingId;
      }

      id = R.id.editText_networkGatewayVal;
      EditText editTextNetworkGatewayVal = ViewBindings.findChildViewById(rootView, id);
      if (editTextNetworkGatewayVal == null) {
        break missingId;
      }

      id = R.id.editText_networkIpVal;
      EditText editTextNetworkIpVal = ViewBindings.findChildViewById(rootView, id);
      if (editTextNetworkIpVal == null) {
        break missingId;
      }

      id = R.id.editText_networkMacVal;
      EditText editTextNetworkMacVal = ViewBindings.findChildViewById(rootView, id);
      if (editTextNetworkMacVal == null) {
        break missingId;
      }

      id = R.id.editText_networkNetmaskVal;
      EditText editTextNetworkNetmaskVal = ViewBindings.findChildViewById(rootView, id);
      if (editTextNetworkNetmaskVal == null) {
        break missingId;
      }

      id = R.id.setting_network_config;
      LinearLayout settingNetworkConfig = ViewBindings.findChildViewById(rootView, id);
      if (settingNetworkConfig == null) {
        break missingId;
      }

      id = R.id.spinner_networkIpAssignment;
      Spinner spinnerNetworkIpAssignment = ViewBindings.findChildViewById(rootView, id);
      if (spinnerNetworkIpAssignment == null) {
        break missingId;
      }

      id = R.id.textView_networkDns1;
      TextView textViewNetworkDns1 = ViewBindings.findChildViewById(rootView, id);
      if (textViewNetworkDns1 == null) {
        break missingId;
      }

      id = R.id.textView_networkDns2;
      TextView textViewNetworkDns2 = ViewBindings.findChildViewById(rootView, id);
      if (textViewNetworkDns2 == null) {
        break missingId;
      }

      id = R.id.textView_networkGateway;
      TextView textViewNetworkGateway = ViewBindings.findChildViewById(rootView, id);
      if (textViewNetworkGateway == null) {
        break missingId;
      }

      id = R.id.textView_networkIp;
      TextView textViewNetworkIp = ViewBindings.findChildViewById(rootView, id);
      if (textViewNetworkIp == null) {
        break missingId;
      }

      id = R.id.textView_networkIpAssignment;
      TextView textViewNetworkIpAssignment = ViewBindings.findChildViewById(rootView, id);
      if (textViewNetworkIpAssignment == null) {
        break missingId;
      }

      id = R.id.textView_networkMac;
      TextView textViewNetworkMac = ViewBindings.findChildViewById(rootView, id);
      if (textViewNetworkMac == null) {
        break missingId;
      }

      id = R.id.textView_networkNetmask;
      TextView textViewNetworkNetmask = ViewBindings.findChildViewById(rootView, id);
      if (textViewNetworkNetmask == null) {
        break missingId;
      }

      return new SettingNetworkConfigBinding((ConstraintLayout) rootView, buttonNetworkSet,
          editTextNetworkDns1Val, editTextNetworkDns2Val, editTextNetworkGatewayVal,
          editTextNetworkIpVal, editTextNetworkMacVal, editTextNetworkNetmaskVal,
          settingNetworkConfig, spinnerNetworkIpAssignment, textViewNetworkDns1,
          textViewNetworkDns2, textViewNetworkGateway, textViewNetworkIp,
          textViewNetworkIpAssignment, textViewNetworkMac, textViewNetworkNetmask);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
